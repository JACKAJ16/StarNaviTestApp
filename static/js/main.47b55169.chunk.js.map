{"version":3,"sources":["App.js","components/Game/Game.js","components/Leaderboard/Leaderboard.js","serviceWorker.js","index.js"],"names":["interval","Game","props","style","width","className","arr","map","val","index","onClick","handlePlayerClick","key","toString","id","Leaderboard","state","data","axios","get","then","res","setState","this","slice","length","winner","date","React","Component","z","ranNums","App","computer","player","field","disabled","option","play","delay","value","handleSubmit","bind","handleRandom","handleRed","handleChange","inputHandle","handleNewGame","handleDate","c","push","today","Date","dd","getDate","yyyy","getFullYear","mm","toLocaleString","month","min","getMinutes","hour","getHours","e","preventDefault","randomNums","setInterval","b","document","getElementById","background","nums","a","i","j","Math","floor","random","splice","p","setTimeout","clearInterval","playerName","handlePost","console","log","post","response","catch","error","target","undefined","onSubmit","onChange","hidden","required","type","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.47b55169.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Game from \"./components/Game/Game\"\nimport Leaderboard from \"./components/Leaderboard/Leaderboard\"\nimport axios from \"axios\"\n\n\nlet z = 0;\nlet ranNums = [];\nlet arr = [];\nlet interval\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      computer: 0,\n      player: 0,\n      id: \"\",\n      field: \"\",\n      style: \"\",\n      data: \"\",\n      disabled: true,\n      option: false,     \n      play: \"Play\",\n      delay: \"\",\n      value: \"PickMode\"\n    }\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleRandom = this.handleRandom.bind(this)\n    this.handlePlayerClick = this.handlePlayerClick.bind(this)\n    this.handleRed = this.handleRed.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.inputHandle = this.inputHandle.bind(this)\n    this.handleNewGame = this.handleNewGame.bind(this)\n  } \n\n\n\n  \n  componentDidMount() {\n    axios.get(\"https://starnavi-frontend-test-task.herokuapp.com/game-settings\")\n      .then(res => \n        this.setState({\n          data: res.data\n        }))\n\n    this.handleDate()\n\n    //Making array not empy right away so user can see first difficulty field on the screen at the start\n    for(let c = 1; c < 26; c++) {\n      arr.push(c)\n    }\n  }\n\n  //Getting current date and time\n  handleDate() {\n    let today = new Date();\n    let dd = today.getDate();\n    let yyyy = today.getFullYear();\n    const mm = today.toLocaleString('en-us', { month: 'long' });\n    let min = (today.getMinutes() < 10 ? \"0\" : \"\") + today.getMinutes();\n    let hour = (today.getHours() < 10 ? \"0\" : \"\") + today.getHours();\n    today = hour + \":\" + min + \" \" + dd + \" \" + mm + ' ' + yyyy;\n    this.setState({\n     date: today\n    })\n  }\n\n  //Launching random numbers array method and setting interval for making random button blue color method\n  handleSubmit(e) {  \n    z = 0;\n    e.preventDefault()\n    this.randomNums()\n    interval = setInterval(this.handleRandom, this.state.delay * 2);\n    this.setState({\n      disabled: true,\n      option: true,\n      computer: 0,\n      player: 0,\n      winner: \"\"\n    })\n    this.handleNewGame()\n  }\n  \n  //Making all buttons original color after the game is done and player managed to change difficulty\n  handleNewGame() {\n    for(let b = 1; b < arr.length; b++) {\n    if(document.getElementById(b).style.background === \"lightblue\" || document.getElementById(b).style.background === \"red\" || document.getElementById(b).style.background === \"green\") {\n      document.getElementById(b).style.background = \"#f9f9f9\"\n      }\n    }\n  }\n\n  //Making random non repeating numbers array\n  randomNums() {\n    let nums = [];\n\n    for(var a = 1; a <= this.state.field; a++) {\n      nums.push(a)\n    }\n\n    let i = nums.length,\n    j = 0;\n\n    while (i--) {\n    j = Math.floor(Math.random() * (i+1));\n\n    ranNums.push(nums[j]);\n    nums.splice(j,1);\n\n    }\n  }\n\n\n  \n  //Making random button blue color and then red if it wasn't clicked\n  handleRandom() {\n    z++;  \n    let p = ranNums[z];\n\n    if(this.state.computer < this.state.field / 2 + 0.5 && this.state.player < this.state.field / 2 + 0.5) {\n      this.setState({\n      id: p\n    }, function() {\n      document.getElementById(this.state.id ? this.state.id : 1).style.background = 'lightblue'\n    })\n    setTimeout(this.handleRed, this.state.delay)\n    }\n\n\n\n  //Clearing interval, setting winner on the screen, POST request right after someone's win\n  if(this.state.computer > this.state.field / 2 || this.state.player > this.state.field / 2) {\n      setTimeout(() => {clearInterval(interval)}, 0)\n      this.setState({\n        winner: this.state.computer > this.state.player ? \"Computer\" : this.state.playerName,\n        play: \"Play again\",\n        disabled: false,\n        option: false\n      })\n      this.handlePost()\n    }\n  }\n\n\n  //Making button red if player didn't clicked it\n  handleRed() {\n      if(document.getElementById(this.state.id).style.background === 'lightblue') { \n      document.getElementById(this.state.id).style.background = 'red'\n      this.setState({\n       computer: this.state.computer  + 1,\n      })\n        console.log(\"Computer: \" + this.state.computer)\n\n      }\n    }\n\n\n  //POST method \n  handlePost() {\n    axios.post('https://starnavi-frontend-test-task.herokuapp.com/winners', {\n          winner: this.state.winner,\n          date: this.state.date\n        })\n        .then(function (response) {\n          console.log(response);\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n      }\n\n  //Making button green if player clicked in time\n  handlePlayerClick(e) {\n   if(document.getElementById(e.target.id).style.background === \"lightblue\") {\n       document.getElementById(e.target.id).style.background = \"green\";\n       this.setState({\n        player: this.state.player + 1,\n        computer: this.state.computer \n      }, () => {\n        console.log(\"Player: \" + this.state.player);\n      })\n    }\n  }\n\n  //Changing difficulty by selecting options in the form\n  handleChange(e) {\n    z = 0;\n    this.setState({\n      field: this.state.data[e.target.value].field * this.state.data[e.target.value].field,\n      delay: this.state.data[e.target.value].delay,\n      disabled: false,\n      value: e.target.value\n      }, () => {\n        if(arr[0] !== undefined) {\n        arr.splice(0, arr.length)\n        for(let a = 1; a  <= this.state.field; a++) {\n          arr.push(a)\n          }\n        } \n\n        if(this.state.field === 25) {\n          this.setState({\n          style: \"205px\"\n        })\n        } else if(this.state.field === 100) {\n          this.setState({\n          style: \"405px\"\n        })\n        } else if(this.state.field === 225) {\n          this.setState({\n          style: \"605px\"\n        })\n      }  \n    })\n\n    this.handleNewGame()\n  \n  ranNums.splice(0, ranNums.length)    \n\n}\n    \n  //Handling player name input \n  inputHandle(e) {\n    this.setState({\n      playerName: e.target.value\n    })\n  }\n  \n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"form-container\">\n          <form onSubmit={this.handleSubmit}>\n           <select value={this.state.value} disabled={this.state.option} onChange={this.handleChange}>\n              <option value=\"PickMode\" hidden>\n                Pick game mode\n              </option>\n              <option value=\"easyMode\">\n                Easy\n              </option>\n              <option value=\"normalMode\">\n                Normal\n              </option>\n              <option value=\"hardMode\">\n                Hard\n              </option>\n            </select>\n            <input onChange={this.inputHandle} required disabled={this.state.option} type=\"text\" placeholder=\"Enter your name\"/>\n            <button className=\"play\" disabled={this.state.disabled}>{this.state.play}</button>\n          </form>\n          <p>Winner is: {this.state.winner}</p>\n          <Game style={this.state.style} arr={arr} handlePlayerClick={this.handlePlayerClick}/>\n        </div>\n        <Leaderboard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport './Game.css';\r\n\r\n\r\n\r\nconst Game = (props) => {\r\n\r\n  \r\n    return (\r\n      <div style={{width: props.style}} className=\"buttons\">\r\n        {props.arr.map((val, index) => {\r\n          return (\r\n          <button onClick={props.handlePlayerClick} key={val.toString()} id={index + 1}></button>\r\n            )\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n\r\nexport default Game;","import React from 'react';\r\nimport './Leaderboard.css';\r\nimport axios from \"axios\";\r\n\r\n\r\n\r\nclass Leaderboard extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      data: []\r\n    }\r\n  } \r\n  \r\n  //Fetching leaderboards\r\n  componentDidUpdate() {\r\n    axios.get(\"https://starnavi-frontend-test-task.herokuapp.com/winners\")\r\n      .then(res => \r\n        this.setState({\r\n        data: res.data\r\n      }))\r\n  }\r\n\r\n\r\n  render() {\r\n    const { data } = this.state\r\n    return (\r\n      <div className=\"leaderboard\">\r\n      <h1>Leaderboard</h1>\r\n        <ul>\r\n          {data.slice(data.length - 15, data.length).map(val => {\r\n            return(\r\n            <li key={val.id}>\r\n              <div>\r\n                {val.winner}\r\n              </div>\r\n              <div>\r\n               {val.date}\r\n              </div>\r\n            </li>\r\n              )\r\n          } )}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Leaderboard;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}